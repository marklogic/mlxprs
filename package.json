{
    "name": "mlxprs",
    "displayName": "MarkLogic developer tools",
    "description": "MarkLogic JavaScript and XQuery development tools",
    "version": "3.7.0-SNAPSHOT",
    "publisher": "mlxprs",
    "engines": {
        "vscode": "^1.76.0"
    },
    "icon": "images/mlxprs-vscode.png",
    "galleryBanner": {
        "color": "#1D252D",
        "theme": "dark"
    },
    "categories": [
        "Debuggers",
        "Programming Languages",
        "Snippets",
        "Other"
    ],
    "repository": "https://github.com/marklogic-community/mlxprs",
    "license": "(Apache-2.0 AND MIT)",
    "activationEvents": [
        "onCommand:extension.getQuery",
        "onCommand:extension.sendXQuery",
        "onCommand:extension.sendJSQuery",
        "onCommand:extension.sendSql",
        "onCommand:extension.sendSparqlQuery",
        "onCommand:extension.showModule",
        "onDebug",
        "onLanguage:xquery-ml",
        "onLanguage:javascript",
        "onLanguage:sparql",
        "mlxprs.showConnectedServers"
    ],
    "main": "./dist/extension",
    "contributes": {
        "commands": [
            {
                "command": "extension.sendXQuery",
                "title": "MarkLogic: Eval XQuery"
            },
            {
                "command": "extension.sendJSQuery",
                "title": "MarkLogic: Eval JS"
            },
            {
                "command": "extension.sendSqlQuery",
                "title": "MarkLogic: Eval SQL"
            },
            {
                "command": "extension.sendSparqlQuery",
                "title": "MarkLogic: Eval SPARQL"
            },
            {
                "command": "extension.sendRowsJsonQuery",
                "title": "MarkLogic: Submit Optic query - return JSON"
            },
            {
                "command": "extension.sendRowsCsvQuery",
                "title": "MarkLogic: Submit Optic query - return CSV"
            },
            {
                "command": "extension.sendRowsXmlQuery",
                "title": "MarkLogic: Submit Optic query - return XML"
            },
            {
                "command": "extension.connectJsServer",
                "title": "MarkLogic: Connect JavaScript Debug Server"
            },
            {
                "command": "extension.disconnectJsServer",
                "title": "MarkLogic: Disconnect JavaScript Debug Server"
            },
            {
                "command": "extension.connectXqyServer",
                "title": "MarkLogic: Connect XQuery Debug Server"
            },
            {
                "command": "extension.disconnectXqyServer",
                "title": "MarkLogic: Disconnect XQuery Debug Server"
            },
            {
                "command": "extension.showModule",
                "title": "MarkLogic: Show module"
            }
        ],
        "breakpoints": [
            {
                "language": "javascript"
            },
            {
                "language": "xquery-ml"
            }
        ],
        "debuggers": [
            {
                "type": "ml-jsdebugger",
                "label": "MarkLogic JS Debugger",
                "program": "./dist/jsDebug.js",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [],
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "DEPRECATED: please use 'program'. 'path' will be removed in a future version",
                                "default": ""
                            },
                            "program": {
                                "type": "string",
                                "description": "path to main module to launch in debugging mode.",
                                "default": ""
                            },
                            "txnId": {
                                "type": "string",
                                "description": "Transaction ID to use with launch.",
                                "default": ""
                            },
                            "root": {
                                "type": "string",
                                "description": "local path corresponding to the root directory for the modules deployed on MarkLogic.",
                                "default": "${workspaceFolder}/src/main/ml-modules/root"
                            }
                        }
                    },
                    "attach": {
                        "required": [
                            "root",
                            "debugServerName"
                        ],
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "DEPRECATED: please use 'root'. 'path' will be removed in a future version.",
                                "default": ""
                            },
                            "root": {
                                "type": "string",
                                "description": "local path corresponding to the root directory for the modules deployed on MarkLogic.",
                                "default": "${workspaceFolder}/src/main/ml-modules/root"
                            },
                            "debugServerName": {
                                "type": "string",
                                "description": "Debug server name, please connect the server before use",
                                "default": ""
                            },
                            "rid": {
                                "type": "string",
                                "description": "Request Id",
                                "default": ""
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "ml-jsdebugger",
                        "request": "launch",
                        "name": "Evaluate Current JavaScript Module",
                        "root": "${workspaceFolder}/src/main/ml-modules/roote"
                    },
                    {
                        "type": "ml-jsdebugger",
                        "request": "attach",
                        "name": "Attach to Remote JavaScript Request",
                        "path": "${workspaceFolder}/src/main/ml-modules/root",
                        "debugServerName": "Enter debug server name"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "MarkLogic: Evaluate Current JavaScript Module",
                        "description": "A new configuration for 'debugging' a user selected javascript file.",
                        "body": {
                            "type": "ml-jsdebugger",
                            "request": "launch",
                            "name": "Evaluate Current JavaScript Module",
                            "root": "^\"\\${workspaceFolder}/src/main/ml-modules/root\""
                        }
                    },
                    {
                        "label": "MarkLogic: Attach to Remote JavaScript Request",
                        "description": "A new configuration for 'debugging' a user selected javascript file.",
                        "body": {
                            "type": "ml-jsdebugger",
                            "request": "attach",
                            "name": "Attach to Remote JavaScript Request",
                            "root": "^\"\\${workspaceFolder}/src/main/ml-modules/root\"",
                            "debugServerName": "data-hub-STAGING"
                        }
                    }
                ],
                "variables": {}
            },
            {
                "type": "xquery-ml",
                "label": "MarkLogic XQY Debugger",
                "program": "./dist/xqyDebug.js",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "root"
                        ],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to the local XQuery source code to evaluate in debug mode. If left blank, the current open buffer will be used.",
                                "default": ""
                            },
                            "root": {
                                "type": "string",
                                "description": "local path corresponding to the root directory for the modules deployed on MarkLogic.",
                                "default": "${workspaceFolder}/src/main/ml-modules/root"
                            }
                        }
                    },
                    "attach": {
                        "properties": {
                            "required": [
                                "root"
                            ],
                            "program": {
                                "type": "string",
                                "description": "In attach mode, this will be the full path to a local source file representing the eval'd ad-hoc query (if present) in MarkLogic.",
                                "default": ""
                            },
                            "root": {
                                "type": "string",
                                "description": "local path corresponding to the root directory for the modules deployed on MarkLogic.",
                                "default": "${workspaceFolder}/src/main/ml-modules/root"
                            },
                            "rid": {
                                "type": "string",
                                "description": "Request Id to attach to. You will be prompted to choose one if none is provided.",
                                "default": ""
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "xquery-ml",
                        "request": "launch",
                        "name": "Ask for file name: ",
                        "program": "",
                        "stopOnEntry": true
                    },
                    {
                        "type": "xquery-ml",
                        "request": "attach",
                        "name": "Ask for file name: ",
                        "stopOnEntry": true
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "MarkLogic: Evaluate Current XQuery Module",
                        "description": "Launch an XQuery request in debug mode",
                        "body": {
                            "type": "xquery-ml",
                            "request": "launch",
                            "name": "Launch XQuery Debug Request",
                            "root": "^\"\\${workspaceFolder}/src/main/ml-modules/root\""
                        }
                    },
                    {
                        "label": "MarkLogic: Attach to Remote XQuery Request",
                        "description": "Attach to a request to debug on a connected app server",
                        "body": {
                            "type": "xquery-ml",
                            "request": "attach",
                            "name": "Attach XQuery Debug Request",
                            "root": "^\"\\${workspaceFolder}/src/main/ml-modules/root\""
                        }
                    }
                ],
                "variables": {
                    "AskForUsername": "extension.mock-debug.getUsername",
                    "AskForPassword": "extension.mock-debug.getPassword"
                }
            }
        ],
        "configuration": {
            "type": "object",
            "title": "MarkLogic connection configuration",
            "properties": {
                "marklogic.host": {
                    "type": "string",
                    "default": "localhost",
                    "description": "hostname for MarkLogic instance"
                },
                "marklogic.port": {
                    "type": "integer",
                    "default": 8000,
                    "description": "port on which to reach the MarkLogic server"
                },
                "marklogic.managePort": {
                    "type": "integer",
                    "default": 8002,
                    "description": "MarkLogic Manage AppServer port"
                },
                "marklogic.username": {
                    "type": "string",
                    "default": "admin",
                    "description": "username for MarkLogic connection"
                },
                "marklogic.password": {
                    "type": "string",
                    "default": "admin",
                    "description": "password for MarkLogic connection"
                },
                "marklogic.documentsDb": {
                    "type": "string",
                    "default": "",
                    "description": "database against which to evaluate queries; required for debugging a local script"
                },
                "marklogic.modulesDb": {
                    "type": "string",
                    "default": "",
                    "description": "modules database used in queries; default modules database for app server will be used if left unspecified"
                },
                "marklogic.modulesRoot": {
                    "type": "string",
                    "default": "/",
                    "description": "modules root if using filesystem"
                },
                "marklogic.authType": {
                    "type": "string",
                    "default": "DIGEST",
                    "description": "only DIGEST or BASIC for now"
                },
                "marklogic.ssl": {
                    "type": "boolean",
                    "default": false,
                    "description": "whether to use ssl for the http connection"
                },
                "marklogic.pathToCa": {
                    "type": "string",
                    "default": "",
                    "description": "path to certificate authority (e.g. for self-signed certificates)"
                },
                "marklogic.rejectUnauthorized": {
                    "type": "boolean",
                    "default": true,
                    "description": "whether the server's SSL certificate should be verified against the list of supplied CAs"
                },
                "marklogic.sparqlContentType": {
                    "type": "string",
                    "enum": [
                        "application/json",
                        "application/xml",
                        "text/html",
                        "text/csv"
                    ],
                    "default": "application/json",
                    "markdownDescription": "How to format SPARQL query results",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "note: CSV-formatted results will not work with `describe` queries"
                    ]
                },
                "marklogic.sql.results": {
                    "type": "string",
                    "markdownDescription": "How to present SQL results from 'Eval SQL'",
                    "enum": [
                        "array",
                        "format",
                        "map"
                    ],
                    "markdownEnumDescriptions": [
                        "Return SQL results as a sequence of array values (`json:array`).",
                        "Return SQL results as formatted strings.",
                        "Return SQL result as a sequence of map values, where the key is the column name."
                    ],
                    "default": "array"
                },
                "marklogic.sql.optimize": {
                    "type": "number",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "default": 1,
                    "description": "Optimization Levels of 0 (off), 1, and 2 are recognized."
                }
            }
        },
        "languages": [
            {
                "id": "xquery-ml",
                "aliases": [
                    "XQuery (ML)",
                    "xquery-ml"
                ],
                "extensions": [
                    ".xq",
                    ".xql",
                    ".xqm",
                    ".xqy",
                    ".xquery"
                ],
                "configuration": "./xquery-ml.configuration.json"
            },
            {
                "id": "javascript",
                "extensions": [
                    ".sjs"
                ]
            }
        ],
        "grammars": [
            {
                "language": "xquery-ml",
                "scopeName": "source.xquery-ml",
                "path": "./syntaxes/xquery-ml.tmLanguage"
            }
        ],
        "snippets": [
            {
                "language": "xquery-ml",
                "path": "./snippets/snippets.json"
            }
        ]
    },
    "scripts": {
        "completeClean": "rimraf node_modules/ .vscode-test/ dist/ server/dist/ server/node_modules/ server/out/ mlxprs-${version}.vsix",
        "npmInstallClientAndServer": "npm install && cd server && npm install && cd ..",
        "testAll": "npm run test && npm run testServer",
        "copy-files": "npm run copy-files --prefix server",
        "clean": "rimraf dist out server/dist server/out",
        "vscode:prepublish": "webpack --mode production && webpack --mode production --config ./server/webpack.config.js",
        "compile": "npm run clean && webpack --mode none && webpack --mode none --config ./server/webpack.config.js",
        "pretest": "rimraf dist && tsc -p tsconfig.json && webpack --mode development --config webpack.test.js",
        "pretest-server": "tsc -p server/tsconfig.json && npm run copy-files",
        "predebug": "npm run clean && npm run copy-files --prefix server && tsc -b server && tsc -b -w .",
        "test": "node dist/test/runTest.js --full-trace",
        "testServer": "npm run pretest-server && node server/dist/test/runTest.js --full-trace",
        "watch": "webpack --mode none --watch & webpack --mode none --watch --config ./server/webpack.config.js",
        "lint": "eslint client/ server/ --ext .ts --ext .js --ext .sjs",
        "lintFix": "eslint client/ server/ --ext .ts --ext .js --ext .sjs --fix"
    },
    "devDependencies": {
        "@types/esprima": "4.0.3",
        "@types/estree": "1.0.0",
        "@types/mocha": "10.0.1",
        "@types/node": "16.11.7",
        "@types/vscode": "1.76.0",
        "@types/webpack": "5.28.0",
        "@types/xml2js": "0.4.11",
        "@typescript-eslint/eslint-plugin": "5.54.1",
        "@typescript-eslint/parser": "5.54.1",
        "await-notify": "1.0.1",
        "eslint": "8.35.0",
        "esprima": "4.0.1",
        "https-proxy-agent": "5.0.1",
        "js-yaml": "4.1.0",
        "marklogic": "3.0.0",
        "merge-options": "3.0.4",
        "mocha": "10.2.0",
        "request": "2.88.2",
        "request-promise": "4.2.6",
        "ts-loader": "9.4.2",
        "@vscode/debugadapter": "1.59.0",
        "@vscode/debugadapter-testsupport": "1.59.0",
        "@vscode/test-electron": "2.3.0",
        "webpack": "5.76.1",
        "webpack-cli": "5.0.1",
        "xml2js": "0.4.23",
        "yargs-parser": "21.1.1"
    },
    "dependencies": {
        "rimraf": "4.3.1",
        "@vscode/debugprotocol": "1.59.0",
        "vscode-languageclient": "7.0.0"
    }
}